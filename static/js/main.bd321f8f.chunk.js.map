{"version":3,"sources":["index.js"],"names":["vecs","vertices","map","v","Object","D_workspace_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_construct__WEBPACK_IMPORTED_MODULE_1__","THREE","D_workspace_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_2__","randomColor","colors","Math","floor","random","length","Trigger","_ref","size","onClick","useMemo","_useState","useState","_useState2","D_workspace_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","hovered","setHovered","rotation","useSpring","PI","config","mass","tension","friction","color","scale","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","position","react_spring_three__WEBPACK_IMPORTED_MODULE_7__","group","rotation-x","attach","onUpdate","self","verticesNeedUpdate","meshToonMaterial","opacity","transparent","onPointerOver","onPointerOut","Lines","_ref2","step","_useState3","_useState4","clicks","setClicks","points","x","y","push","Fragment","ReactDOM","render","react_three_fiber__WEBPACK_IMPORTED_MODULE_6__","invalidateFrameLoop","pixelRatio","window","devicePixelRatio","camera","near","far","intensity","className","document","getElementById"],"mappings":"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","file":"static/js/main.bd321f8f.chunk.js","sourcesContent":["import * as THREE from 'three';\nimport React, { useState, useMemo } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Canvas } from 'react-three-fiber';\nimport { a, useSpring } from 'react-spring/three';\n\nimport './styles.css';\n\nfunction vecs(vertices) {\n  return vertices.map(v => new THREE.Vector3(...v));\n}\n\nfunction randomColor() {\n  const colors = ['#ff0000', '#ffff00', '#0000ff'];\n  return colors[Math.floor(Math.random() * colors.length)];\n}\n\nfunction Trigger({ size, onClick }) {\n  const vertices = useMemo(\n    () => vecs([[-1, 0, 0], [0, 1, 0], [1, 0, 0], [0, -1, 0], [-1, 0, 0]]),\n    []\n  );\n  const [hovered, setHovered] = useState(false);\n  const { rotation } = useSpring(\n    {\n      rotation: hovered ? Math.PI * 1.5 : 0,\n      config: { mass: 10, tension: 300, friction: 50 },\n    },\n    [hovered]\n  );\n  const { color } = useSpring({ color: randomColor() }, [hovered]);\n\n  const scale = [size / 2, size / 2, 1];\n\n  return (\n    <group position={[size, size, 0]}>\n      <a.group scale={scale} rotation-x={rotation}>\n        <line>\n          <geometry\n            attach=\"geometry\"\n            vertices={vertices}\n            onUpdate={self => (self.verticesNeedUpdate = true)}\n          />\n          <lineBasicMaterial attach=\"material\" color=\"black\" />\n        </line>\n        <mesh>\n          <octahedronGeometry attach=\"geometry\" />\n          <a.meshToonMaterial\n            attach=\"material\"\n            color={color}\n            opacity={0.5}\n            transparent\n          />\n        </mesh>\n      </a.group>\n      <mesh\n        scale={scale}\n        onClick={onClick}\n        onPointerOver={() => setHovered(true)}\n        onPointerOut={() => setHovered(false)}\n      >\n        <octahedronGeometry attach=\"geometry\" />\n        <meshBasicMaterial\n          attach=\"material\"\n          color=\"black\"\n          opacity={0}\n          transparent\n        />\n      </mesh>\n    </group>\n  );\n}\n\nfunction Lines({ step, size }) {\n  const [clicks, setClicks] = useState(0);\n  const vertices = useMemo(() => {\n    const points = [];\n    for (let x = 0; x < size; x += step) {\n      for (let y = 0; y < size; y += step) {\n        const leftToRight = Math.random() >= 0.5;\n        if (leftToRight) {\n          points.push([x, y, 0], [x + step, y + step, 0]);\n        } else {\n          points.push([x + step, y, 0], [x, y + step, 0]);\n        }\n      }\n    }\n    return vecs(points);\n    //eslint-disable-next-line react-hooks/exhaustive-deps (clicks)\n  }, [step, size, clicks]);\n\n  return (\n    <>\n      <lineSegments>\n        <geometry\n          attach=\"geometry\"\n          vertices={vertices}\n          onUpdate={self => (self.verticesNeedUpdate = true)}\n        />\n        <lineBasicMaterial attach=\"material\" color=\"black\" />\n      </lineSegments>\n      <Trigger size={size / 2} onClick={() => setClicks(clicks + 1)} />\n    </>\n  );\n}\n\nfunction Main() {\n  return (\n    <>\n      <Canvas\n        invalidateFrameLoop /* remove for post processing */\n        pixelRatio={window.devicePixelRatio}\n        camera={{\n          near: 0.1,\n          far: 1000,\n          position: [50, 50, 65],\n        }}\n      >\n        <ambientLight intensity={0.5} />\n        <spotLight intensity={0.5} position={[50, 50, 1000]} />\n        <Lines step={5} size={100} />\n      </Canvas>\n      <span className=\"center-prompt\">click me</span>\n    </>\n  );\n}\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}